// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  password       String
  createdAt      DateTime         @default(now())
  UserRole       UserRole[]
  FilePermission FilePermission[]
  File           File[]
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  RolePermission RolePermission[]
  UserRole       UserRole[]
}

model Permission {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  RolePermission RolePermission[]
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  role         Role       @relation(fields: [roleId], references: [id])
  roleId       Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  permissionId Int
  createdAt    DateTime   @default(now())
}

model UserRole {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  role      Role     @relation(fields: [roleId], references: [id])
  roleId    Int
  createdAt DateTime @default(now())
}

model File {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  path                 String
  createdAt            DateTime               @default(now())
  createdById          Int
  createdBy            User                   @relation(fields: [createdById], references: [id])
  FilePermission       FilePermission[]
  FileStatusByProvider FileStatusByProvider[]
}

model FilePermissionType {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  createdAt      DateTime         @default(now())
  FilePermission FilePermission[]
}

model FilePermission {
  id        Int                @id @default(autoincrement())
  file      File               @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId    Int
  user      User               @relation(fields: [userId], references: [id])
  userId    Int
  type      FilePermissionType @relation(fields: [typeId], references: [id])
  typeId    Int
  createdAt DateTime           @default(now())

  @@unique([fileId, userId, typeId])
}

model Provider {
  id                   Int                    @id @default(autoincrement())
  name                 String                 @unique
  status               Boolean                @default(true)
  previousStatus       Boolean                @default(true)
  FileStatusByProvider FileStatusByProvider[]
}

model FileStatusByProvider {
  id         Int      @id @default(autoincrement())
  file       File     @relation(fields: [fileId], references: [id], onDelete: Cascade)
  fileId     Int
  provider   Provider @relation(fields: [providerId], references: [id])
  providerId Int
  status     Boolean
  createdAt  DateTime @default(now())

  @@unique([fileId, providerId]) // clave Ãºnica compuesta
}
